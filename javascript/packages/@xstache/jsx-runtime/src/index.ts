export interface JsxRuntime {
    jsx(type: any, props: unknown, key?: any): any;
    jsxs(type: any, props: unknown, key?: any): any;
    Fragment: any;
}

class Context {
    constructor(
        private readonly data: any,
        private readonly jsxRuntime: JsxRuntime,
        private readonly parent: Context | null = null,
    ) {}

    public value(keys: string[]) {
        let found = true;
        let value = this.data;
        for (const key of keys) {
            const next = value[key];
            if (next) {
                value = next;
            } else {
                found = false;
                break;
            }
        }
        return found ? value : this.parent?.value(keys);
    }

    public section(keys: string[], implementation: (context: Context) => any) {
        const data = this.value(keys);
        if (!data) {
            return undefined;
        }
        const render = (data: any) =>
            implementation(new Context(data, this.jsxRuntime, this));
        const { jsxRuntime } = this;
        return Array.isArray(data)
            ? jsxRuntime.jsx(jsxRuntime.Fragment, {
                  children: data.map(render),
              })
            : render(data);
    }
}

/** Signature of the function generated by the `@xstache/jsx` compiler. */
export type Implementation = (jsx: JsxRuntime, context: Context) => any;

export class Template {
    constructor(
        private readonly implementation: Implementation,
        private readonly jsxRuntime: JsxRuntime,
    ) {}

    public render(data: any) {
        const { jsxRuntime } = this;
        return this.implementation(jsxRuntime, new Context(data, jsxRuntime));
    }
}
